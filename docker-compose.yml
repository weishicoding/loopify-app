services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_4LW_COMMANDS_WHITELIST: "ruok"
      ZOOKEEPER_DATA_DIR: /var/lib/zookeeper
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "stat /proc/1/status || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: kafka
    ports:
      - "9092:9092" # 供 Docker 网络内部服务使用
      - "29092:29092" # 供外部(宿主机)访问 Kafka (如果需要)
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: INTERNAL://:9092,EXTERNAL://:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:29092 # 宿主机通过 localhost:29092 访问
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1 # 对于 Confluent 镜像
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1 # 对于 Confluent 镜像
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "/usr/bin/kafka-topics --bootstrap-server localhost:9092 --list || exit 1" ] # 确保 Kafka 正常
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  connect: # Kafka Connect 服务
    image: confluentinc/cp-kafka-connect-base:7.6.1 # 使用 base 镜像，方便添加 connector
    container_name: kafka-connect
    ports:
      - "8083:8083"
    depends_on:
      kafka:
        condition: service_healthy
      mysql:
        condition: service_healthy
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka:9092"
      CONNECT_REST_ADVERTISED_HOST_NAME: "connect"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: "connect-cdc-group"
      CONNECT_CONFIG_STORAGE_TOPIC: "connect_cdc_configs"
      CONNECT_OFFSET_STORAGE_TOPIC: "connect_cdc_offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "connect_cdc_status"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_INTERNAL_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
    networks:
      - app-network
    volumes:
      # 将下载的 Debezium MySQL Connector jar 包目录挂载到容器中
      - ./connectors/debezium-mysql-connector:/usr/share/confluent-hub-components/debezium-connector-mysql
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/connectors" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8888:8888"
    networks:
      - app-network
    depends_on:
      main-service:
        condition: service_started # Wait for services to be running
      chat-service:
        condition: service_started
      kafka:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    environment:
      APP_JWT_SECRET: 8905473032bb464a531e7f1c52a28b6b793f46379f8a8c2d899f30e47325e897fcc7c284005593b242334e6642d5f275c601634ee3d66a02dda7a787064612772dbfc8b599f8d3b4e74a60b564f42ec6a15750c819aa0b59c294b9c8dc51800b6198d2dd6ea0415fc079bf83f6403a2c5f8f029acc092b1e1a120fb805e46e7c3e17b4e7b17632aeaf43f455bac480bc8c1d672bc83e2e86e5daf16ebf1f1be9d9d5b02d6fd97f4c900dc73b6f082a24e6f9e6530f59fc56fb7d20ccf5d73fc7c6b05be5c4f19a50cba77aa406366abf8fe5b98f84e3c3fc5500aec446bf74b806f4c843ad572953463227c24c4ef9ad5cedb3b45779b80c827aabf82f5876f3
      MAIN_SERVICE_URL: http://main-service:8080
      CHAT_SERVICE_URL: http://chat-service:8085
    restart: on-failure

  main-service:
    build:
      context: ./main-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      mysql:
        condition: service_healthy
      elasticsearch:
        condition: service_started
      redis:
        condition: service_started
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - app-network
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/main_service_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: 123456
      SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT: 30000
      SPRING_DATA_REDIS_HOST: redis
      MINIO_ENDPOINT: http://minio:9000
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    restart: on-failure

  chat-service:
    build:
      context: ./chat-service
      dockerfile: Dockerfile
    ports:
      - "8085:8085"
    depends_on:
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      redis:
        condition: service_started
      mysql:
        condition: service_healthy
      main-service:
        condition: service_started
    networks:
      - app-network
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/chat_service_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: 123456
    restart: on-failure

  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: 123456
      MYSQL_DATABASE: main_service_db
      MYSQL_USER: admin
      MYSQL_PASSWORD: 123456
      MYSQL_ROOT_HOST: '%'
    ports:
      - "3306:3306"
    command:
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --server-id=1
      --log-bin=mysql-bin
      --binlog-format=ROW
      --gtid-mode=ON
      --enforce-gtid-consistency=ON
    volumes:
      - mysql-data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d # 用于创建 chat_service_db 和 debezium 用户
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p123456" ]
      interval: 5s
      timeout: 10s
      retries: 30
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 20s
      retries: 3
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/.htpasswd:/etc/nginx/.htpasswd
      - nginx-cache:/var/cache/nginx
    depends_on:
      - api-gateway
      - minio
    networks:
      - app-network

  redis:
    image: redis:7.0
    container_name: loopify-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 10s
      retries: 5

  elasticsearch:
    image: elasticsearch:8.12.0
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    networks:
      - app-network
    ports:
      - "9200:9200"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

networks:
  app-network:
    driver: bridge

volumes:
  minio-data: {}
  nginx-cache: {}
  mysql-data: {}
  redis-data: {}
  kafka-data: {}
  zookeeper-data: {}
  zookeeper-log: {}