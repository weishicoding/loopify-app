services:
  main-service:
    build:
      context: ./main-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      mysql:
        condition: service_healthy
      elasticsearch:
        condition: service_started
      redis:
        condition: service_started
      rabbitmq:
        condition: service_started
      minio:
        condition: service_healthy

    networks:
      - app-network
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/loopify?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: 123456
      SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT: 30000

  chat-service:
    build:
      context: ./chat-service
      dockerfile: Dockerfile
    ports:
      - "8085:8085"
    depends_on:
      # 明确依赖关系，确保 RabbitMQ 和 Redis 先启动
      # (可以添加 condition: service_started 或 service_healthy 以增加健壮性)
      rabbitmq:
        condition: service_started
      redis:
        condition: service_started
      mysql:
        condition: service_healthy
    networks:
      - app-network
    environment:
      # --- VITAL FIXES ---
      # 覆盖 application.yml 中的 RabbitMQ 主机名
      SPRING_RABBITMQ_HOST: rabbitmq
      # 覆盖 application.yml 中的 Redis 主机名
      SPRING_DATA_REDIS_HOST: redis
      # 覆盖 application.yml 中的数据库 URL (如果 chat-service 连接数据库)
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/loopify?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: admin   # 确保这些凭证与 application.yml 或 MySQL 服务匹配
      SPRING_DATASOURCE_PASSWORD: 123456

  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"    # API 端口
      - "9001:9001"    # 控制台端口
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - app-network

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/.htpasswd:/etc/nginx/.htpasswd  # 认证文件
      - nginx-cache:/var/cache/nginx           # 缓存目录
    depends_on:
      - main-service
      - chat-service
      - minio
    networks:
      - app-network

  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: 123456
      MYSQL_DATABASE: loopify
      MYSQL_USER: admin
      MYSQL_PASSWORD: 123456
      MYSQL_ROOT_HOST: '%'
    ports:
      - "3306:3306"
    healthcheck:
      test: [ "CMD", "mysql", "-uadmin", "-p123456", "-e", "SELECT 1" ]
      interval: 5s
      timeout: 10s
      retries: 30
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - app-network
    command:
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --max_connections=1000

  redis:
    image: redis:7.0
    container_name: loopify-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    command: [ "redis-server", "--appendonly", "yes" ]

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: loopify-rabbitmq
    restart: always
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI port
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - app-network
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest

  elasticsearch:
    image: elasticsearch:8.12.0
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    networks:
      - app-network
    ports:
      - "9200:9200"
    ulimits:
      memlock:
        soft: -1
        hard: -1

networks:
  app-network:
    driver: bridge

volumes: # <-- 添加或修改这个顶层 volumes 部分
  minio-data: {}  # 已有的 volume (保持)
  nginx-cache: {} # 已有的 volume (保持)
  mysql-data: {}  # <-- 添加这一行来声明 mysql-data volume
  redis-data: {}  # <-- 声明 redis-data volume (你的 redis 服务也用了它)
  rabbitmq-data: {} # <-- 声明 rabbitmq-data volume (你的 rabbitmq 服务也用了它)